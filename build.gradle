buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.ajoberstar.grgit:grgit-core:3.1.1'
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

static def getDate() {
    return new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
}

defaultTasks 'info'

archivesBaseName = "pcj"
ext.versionNumber = "5.3"
ext.buildNumber = "unknown"

repositories {
    //    mavenCentral()
}

dependencies {
    //    testCompile 'junit:junit:4.11'
}

compileJava {
    group 'build'
    description 'Compiling java classes using Java 8'

    options.compilerArgs = [
            '--release', '8',
            '-Xlint:unchecked',
            '-Xlint:deprecation'
    ]
}

compileTestJava {
    group 'build'
    description 'Compiles java test classes using Java 8 disabling StorageAnnotationProcessor'

    options.compilerArgs += '-proc:none' // 'org.pcj.internal.StorageAnnotationProcessor'
}

task info {
    group 'other'
    description 'PCJ -- Parallel Computing in Java build script'

    println "PCJ -- Parallel Computing in Java build script"
}

task javadoc(overwrite: true, type: Javadoc) {
    group 'build'
    description 'Generates javadoc from sources without internal packages'

    failOnError = false
    source = sourceSets.main.allJava
    exclude "org/pcj/internal/**"
}

jar.group = 'release'

task javadocJar(type: Jar, dependsOn: javadoc) {
    group 'release'
    description 'Generates jar with javadoc'

    from 'LICENSE'
    from javadoc.destinationDir
    archiveClassifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    group 'release'
    description 'Generates jar with sources'

    from 'LICENSE'
    from sourceSets.main.allJava
    from sourceSets.main.resources
    archiveClassifier = 'sources'
}

task snapshotBuild {
    group 'release'
    description 'Generates snapshot build with jar, javadoc and sources'

    snapshotBuild.dependsOn(jar, javadocJar, sourcesJar)
}

task releaseBuild {
    group 'release'
    description 'Generates release build starting with clean with jar, javadoc and sources'

    outputs.upToDateWhen { false }
    jar.mustRunAfter(clean)
    releaseBuild.dependsOn(clean, build, javadocJar, sourcesJar)
}

task publishReleaseBuild {
    group 'publishing'
    description 'Publishes release build to Maven Central'

    publishReleaseBuild.dependsOn(releaseBuild, publish)
}

jar {
    from 'LICENSE'
    manifest {
        attributes(
                'Automatic-Module-Name': 'org.pcj',
                'Specification-Title': 'PCJ -- Parallel Computing in Java',
                'Implementation-Title': 'org.pcj',
                'Specification-Vendor': 'PCJ Library, Marek Nowicki',
                'Implementation-Vendor': 'Marek Nowicki',
                'Sealed': true,
        )
        attributes(['Sealed': false], 'org/pcj/')
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'pl.edu.icm.pcj'
            artifactId = 'pcj'
            artifact sourcesJar
            artifact javadocJar
            pom {
                from components.java
                packaging 'jar'
                name = 'PCJ'
                description = 'PCJ is Java library for parallel computing in Java. It is based on the PGAS (Partitioned Global Address Space) paradigm. It allows for easy implementation in Java of any parallel algorithm. PCJ application can be run on laptop, workstation, cluster and HPC system including large supercomputers.'
                url = 'http://pcj.icm.edu.pl'
                licenses {
                    license {
                        name = 'The 3-Clause BSD License'
                        url = 'https://opensource.org/licenses/BSD-3-Clause'
                    }
                }
                developers {
                    developer {
                        id = 'faramir'
                        name = 'Marek Nowicki'
                        email = 'faramir@mat.umk.pl'
                    }
                }
                scm {
                    url = 'https://github.com/hpdcj/PCJ'
                    connection = 'scm:git:git://github.com/hpdcj/PCJ.git'
                    developerConnection = 'scm:git:git@github.com:hpdcj/PCJ.git'
                }
            }
        }
    }
    repositories {
        maven {
            url = "$buildDir/repos/unknown"
        }
    }
    generatePomFileForMavenJavaPublication.mustRunAfter(clean)
}

signing {
    group 'publishing'
    description 'Signs generated jar for publishing'

    sign publishing.publications.mavenJava
}


gradle.taskGraph.whenReady { taskGraph ->
    def properties = new Properties()

    def versionFile = file('build.version')
    if (versionFile.canRead()) {
        versionFile.withReader { properties.load(it) }
    }

    if (properties['build.number'] == null) {
        properties['build.number'] = '0'
    }

    buildNumber = properties['build.number']
    if (taskGraph.hasTask(releaseBuild)) {
        publish.doLast {
            properties['build.number'] = (buildNumber.toInteger() + 1).toString()
            versionFile.withWriter { properties.store(it, null) }
        }
    } else {
        buildNumber = "$buildNumber-SNAPSHOT"
    }

    def repoId = [abbreviatedId: "unknown", id: "unknown"]
    try {
        repoId = org.ajoberstar.grgit.Grgit.open(dir: project.file('.')).head()
    } catch (Exception e) {
    }

    version = "$versionNumber.$buildNumber"
    jar.doFirst {
        archiveClassifier = ''
        manifest {
            attributes(
                    'Specification-Version': "$version",
                    'Implementation-Version': "$version-$repoId.abbreviatedId ($date)",
                    'Git-Commit-Id': "$repoId.id",
                    'Build-Time': date,
                    'Built-By': System.getProperty('user.name')
            )
        }
    }

    if (taskGraph.hasTask(publish)) {
//        def snapshotsRepoUrl = "$buildDir/repos/snapshots"
//        def releasesRepoUrl = "$buildDir/repos/releases"
        def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
        def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
        publishing.repositories.maven.url = buildNumber.contains('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        if (publishing.repositories.maven.url.scheme == "https") {
            publishing.repositories.maven.credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}
